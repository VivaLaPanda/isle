# Create Schema
mutation {
  schema {
    # Used to differentiate between the below types
    type: string @index(hash) .
    
    # User
    user.name: string @index(exact) .
    user.password: password .
    user.email: string @index(hash) .
    user.aviImgUri: string .
    user.reputation: int .
	user.spent: int .
    user.role: uid .
    user.invitedBy: uid .
    user.joined: dateTime .
    user.posted: uid @reverse @count .
    user.commented: uid @reverse @count .
    
    # Role
    role.text: string @index(hash) .
    
    # Post/Comment
    content.title: string @index(fulltext) .
    content.imageUri: string .
    content.body: string @index(fulltext) . 
    content.created: dateTime .
    content.tags: uid @reverse .
    content.score: int .
    content.sentiment: int .
    content.children: uid @count .
    
    # Tag
    tag.text: string @index(hash) .
    
    # Purchasables
    sellable.name: string .
    sellable.cost: int .
    
    # Invites
    invite.code: string @index(hash) .
	invite.createdBy: uid .
  }
}

# Create invite
# input {user: uid, spent: int, randCode: string}
mutation {
	set {
		<${user}> <user.spent> ${spent} .
		_:newInvite <invite.code> ${randCode} .
		_:newInvite <invite.createdBy> <${user}> .
	}
}

# Check invite
# input {inviteCode: string}
{
	queryInvite(func: eq(invite.code, ${inviteCode})) {
		uid: _uid_
		createdBy: invite.createdBy
	}
}
# Use invite (After you create the user successfully)
# input {invite: uid}
mutation {
	delete {
		<${invite}> * *
	}
}

# Create User
# input {name:string, password:string, email:string, invited_by: string(uid), joined: datetime}
# Default rep is 100
mutation {
	set {
		_:newUser <user.name> "${name}" .
		_:newUser <user.password> "${password}" .
		_:newUser <user.email> "${email}" .
		_:newUser <user.invited_by> <${invited_by}> .
		_:newUser <user.joined> "${joined}" .
		_:newUser <user.reputation> 100 .
	}
}

# Fetch User
# input {uid: string}
{
	fetchUser(func: uid(${uid})) {
    name: user.name@.
    email: user.email@.
    joined: user.joined
	reputation: user.reputation
    commented: user.commented {
		content.title@.
	}
	posted: user.posted {
		content.title@.
	}
  }  
}

# Create Post 
# input {title: string, imageUri: string, body: string, created: dateTime, postedBy: string, tags: []uid, currentRep: int}

mutation {
	set {
		_:newPost <content.title> "${title}" .
		_:newPost <content.imageUri> "imageUri}" .
		_:newPost <content.body> "${body}" .
		_:newPost <content.created> "${created}" .
		_:newPost <content.score> 1 .
		<${postedBy}> <user.posted> _:newPost .
		<${postedBy}> <user.reputation> ${currentRep+1}
		_:newPost <content.tags> ${i.uid} # This gets looped
	}
}

#### Content fragments

# Post base
title: content.title@.
imageUri: content.imageUri
timestamp: content.created
score: content.score
submitted: ~user.posted {
	user.name@.
}
tags: content.tags {
	tag.text
}
numComments: count(content.children)

# Comment fragment
score: content.score
text: content.body
sentiment: content.sentiment
commented: ~user.posted {
	user.name@.
}

### End fragments

# Query posts ordered by date
# input {tags: string[], query: string, first: int, offset: int}
{
	var(func: eq(tag.Text, ["${i.tagName}"])) @filter(anyoftext(content.title, "${query}")) {
		p as ~tag(first: ${first}, offset: ${offset})
	}

	queryPosts(func: uid(p), orderasc: content.created) {
		# Post base
	}
}

# Fetch specific post
# input {uid: uid}
{
	fetchPost(func: uid($uid)) {
		# Post base
		body: content.body
		
		## Print out 3 layers of comments
		comments: content.children {
			# Comment fragment
				comments: content.children {
					# Comment fragment
					comments: content.children {
						# Comment fragment
					}
				}
		}
	}
}

# Get more comments starting at given root
# input {uid: uid}
{
	moreComments(func: uid($uid)) {
		comments: content.children {
			# Comment fragment
			comments: content.children {
				# Comment fragment
				comments: content.children {
					# Comment fragment
				}
			}
		}
	}
}